import com.intex.IntexWrap;
import com.intex.IntexWrapException;
import com.intex.IntexWrapParseException;
import com.intex.KeyVal;

public class IntexWrapTest6 {
	static {
		System.setProperty("LD_LIBRARY_PATH", "/vn_le/en2_data_d/intex/test_intex/testintex2/src");
		System.setProperty("java.library.path", "/vn_le/en2_data_d/intex/test_intex/testintex2");
		System.loadLibrary("IntexWrapJNI"); // Notice lack of lib
		System.loadLibrary("vcmowrap"); // Notice lack of lib prefix
	}

	private static String CDI_PATH() {
		if (System.getProperty("file.separator").equals("/"))
			return "/vn_le/en2_data_d/intex/test_intex/testintex2/src|/vn_cont/intexprod/data/cdi";
			return "s:\\cmo_cdi";
	}

	private static String CDU_PATH() {
		if (System.getProperty("file.separator").equals("/"))
			return "/vn_cont/intexprod/data/cdu";
		return "s:\\cmo_cdu";
	}

	public static void main(String args[]) {

		try {
			StringBuffer DataOut = new StringBuffer("");
			String accessCode = "hfb75ic2raoo8bv5a";
//			String accessCode = "tbvskobcg1trnufl1";
			String companyName = "FANNIE MAE - PORTFOLIO INVESTMENTS/CHIEF RISK-FINANCIAL OFFICE";
			String dealName = "cas15";
			String[] trancheNames = {"'1AH'"};
			
//			String lossCurve = "0 0 0 0 0.000163 0.000579 0.02456 0.029646 0.034788 0.040142 0.045918 0.05153 0.057552 0.064162 0.072797 0.081066 0.09331 0.105903 0.120157 0.136202 0.154805 0.175702 0.190512 0.202453 0.214605 0.226953 0.242375 0.258938 0.276813 0.300026 0.325274 0.351226 0.372419 0.394684 0.41774 0.427247 0.435413 0.4423 0.448838 0.455445 0.461162 0.46843 0.475494 0.482573 0.488048 0.492733 0.49709 0.494112 0.490234 0.486151 0.49065 0.495347 0.499563 0.505066 0.510654 0.5161 0.517024 0.517291 0.517109 0.507682 0.497848 0.488115 0.487756 0.487305 0.487185 0.488186 0.48922 0.490379 0.479416 0.467543 0.455873 0.434198 0.41339 0.394553 0.383377 0.373218 0.363044 0.353944 0.344476 0.335505 0.324732 0.313518 0.303382 0.297843 0.293094 0.288571 0.285215 0.282373 0.2799 0.276205 0.272147 0.268248 0.262381 0.257288 0.252498 0.249617 0.246807 0.244145 0.242681 0.241304 0.240207 0.237994 0.235746 0.233601 0.230011 0.226751 0.223598 0.223911 0.224222 0.224534 0.225478 0.22648 0.227672 0.227812 0.227676 0.227559 0.225971 0.224689 0.223171 0.222699 0.222157 0.221606 0.222047 0.222514 0.222552 0.221567 0.220264 0.218954 0.216358 0.213915 0.211407 0.210097 0.208838 0.207623 0.207281 0.206999 0.206977 0.205981 0.20471 0.203437 0.200901 0.198493 0.196032 0.194567 0.193147 0.191749 0.191108 0.190493 0.190076 0.188808 0.187258 0.185727 0.183067 0.180536 0.177951 0.176281 0.17464 0.173039 0.172098 0.171189 0.170489 0.169033 0.167325 0.165655 0.16304 0.160546 0.15802 0.156313 0.15465 0.152994 0.151932 0.150901 0.150053 0.148574 0.146904 0.145278 0.142906 0.14067 0.138393 0.136791 0.135236 0.133693 0.13265 0.131642 0.130803 0.129439 0.127906 0.126419 0.12436 0.122448 0.120489 0.119063 0.11768 0.116305 0.115333 0.114386 0.113597 0.11239 0.111033 0.109723 0.107975 0.10635 0.104692 0.103454 0.102249 0.101049 0.100183 0.099337 0.098627 0.097587 0.096411 0.095279 0.093809 0.092446 0.091054 0.089986 0.088947 0.087911 0.087136 0.086382 0.08575 0.084845 0.083825 0.082846 0.081603 0.080451 0.079273 0.078349 0.07745 0.076553 0.075867 0.075194 0.074631 0.073846 0.07296 0.072108 0.07105 0.070076 0.069078 0.06828 0.067503 0.066724 0.066119 0.065521 0.065013 0.064326 0.06355 0.062804 0.061911 0.061083 0.060233 0.059538 0.058859 0.058177 0.057632 0.05709 0.056628 0.056025 0.05535 0.0547 0.053932 0.053229 0.052505 0.051895 0.0513 0.050701 0.050214 0.049729 0.049315 0.048789 0.0482 0.047637 0.046982 0.046383 0.045765 0.045233 0.044714 0.044191 0.043759 0.043326 0.042957 0.042501 0.041991 0.041506 0.040948 0.04044 0.039916 0.039454 0.039003 0.038546 0.038163 0.037779 0.037451 0.037057 0.036617 0.036198 0.035725 0.035294 0.034849 0.034456 0.034072 0.033685 0.033352 0.033017 0.032732 0.032396 0.032024 0.031673 0.031281 0.030931 0.030572 0.030248 0.02993 0.029606 0.029332 0.029056 0.028831 0.028572 0.028282 0.028016 0.027716 0.027453 0.027176 0.026924 0.026672 0.02642 0.02621 0.026 0.025851 0.025677 0.025475 0.0253 0.025099 0.024941 0.024769 0.024625 0.02448 0.024344 0.024252 0.024173 0.024179 0.024186 0.024182 0.02423 0.024275 0.024405 0.024548 0.02477 0.02503 0.025385 0.025883 0.026546 0.02759 0.028968 0.030805 0.033547 0.037688 0.044983 0.0596 0.105354";
//			String prepayCurve = "0 0.51091 0.653548 0.791983 0.854933 0.935032 1.006534 1.032118 1.109965 1.123122 1.201879 1.149979 1.196044 1.087292 1.020935 1.001829 0.954225 0.902259 0.884274 0.805956 0.822131 0.732013 0.754901 0.62645 0.629845 0.546038 0.530662 0.558575 0.539698 0.526734 0.53349 0.499316 0.534936 0.487686 0.522178 0.442867 0.464801 0.412682 0.424941 0.463175 0.462709 0.463498 0.479874 0.458524 0.500209 0.456888 0.49326 0.410808 0.426943 0.37144 0.380438 0.418313 0.419318 0.417587 0.432212 0.411618 0.448943 0.411625 0.443864 0.371871 0.390164 0.343171 0.354749 0.391677 0.388307 0.393575 0.41116 0.394821 0.438376 0.406852 0.448511 0.379785 0.40862 0.36198 0.379844 0.428468 0.438959 0.451478 0.481301 0.469912 0.510148 0.460381 0.497372 0.414622 0.441995 0.387694 0.407835 0.464578 0.475276 0.485681 0.513261 0.50077 0.545401 0.495646 0.542449 0.451857 0.483393 0.426683 0.448602 0.509906 0.520057 0.535203 0.568657 0.555724 0.604283 0.55109 0.593499 0.505029 0.536449 0.476447 0.501689 0.560465 0.572837 0.583236 0.616008 0.597017 0.640466 0.584479 0.633214 0.540565 0.569646 0.509467 0.530813 0.589638 0.599114 0.60799 0.63443 0.615132 0.656895 0.597452 0.639347 0.542507 0.572715 0.507463 0.524529 0.582372 0.586985 0.594139 0.621662 0.60238 0.651138 0.590721 0.632398 0.534877 0.563761 0.499073 0.520478 0.578509 0.58428 0.59347 0.620682 0.599216 0.643022 0.582509 0.627069 0.526914 0.559899 0.492253 0.514042 0.571728 0.578806 0.587301 0.615878 0.594718 0.641161 0.581414 0.626799 0.524254 0.55652 0.487987 0.51277 0.573543 0.582276 0.591109 0.620993 0.599536 0.648475 0.586344 0.633809 0.526654 0.558249 0.486383 0.510789 0.577937 0.58625 0.594887 0.625157 0.600729 0.650867 0.584531 0.63529 0.523946 0.559945 0.484856 0.509831 0.577069 0.585811 0.594291 0.624811 0.600552 0.651504 0.58262 0.635434 0.520223 0.555413 0.48065 0.505675 0.57542 0.584854 0.593594 0.627198 0.600604 0.653101 0.583926 0.636489 0.520784 0.557776 0.479061 0.506852 0.578158 0.586773 0.598118 0.63289 0.604361 0.658211 0.58482 0.638268 0.518078 0.557067 0.475219 0.504578 0.579557 0.589683 0.598841 0.632222 0.60567 0.659925 0.58447 0.639678 0.51784 0.556753 0.475447 0.505108 0.580696 0.589892 0.598398 0.630447 0.602871 0.659767 0.583057 0.641868 0.514808 0.555373 0.469755 0.49734 0.57403 0.584362 0.591544 0.626521 0.596527 0.655334 0.579106 0.636296 0.507665 0.547942 0.462246 0.491913 0.571561 0.581452 0.590551 0.626328 0.597563 0.657037 0.577538 0.63736 0.506302 0.550705 0.461853 0.493544 0.575377 0.586946 0.59678 0.634529 0.60404 0.667394 0.583225 0.646137 0.510088 0.552946 0.462703 0.494903 0.578861 0.590207 0.598739 0.636141 0.602793 0.665187 0.582319 0.645651 0.508788 0.553843 0.45989 0.493871 0.578604 0.589673 0.601624 0.641501 0.609123 0.676948 0.599318 0.6725 0.535054 0.589888 0.497276 0.539867 0.645678 0.670096 0.694144 0.751885 0.725927 0.820079 0.727131 0.822131 0.652143 0.726443 0.614523 0.671448 0.811941 0.842409 0.874827 0.95511 0.931559 1.062892 0.947926 1.081235 0.866313 0.975143 0.830395 0.921748 1.126463 1.192458 1.257371 1.390834 1.373327 1.595568 1.449744 1.694751 1.387931 1.610746 1.411197 1.625527 2.082438 2.318795 2.593611 3.091919 3.348713 4.350041 4.649798 6.829936 0";
			String intRate = "0.35050000";
			String prepayCurve = "0 0.724398 0.874352 0.915365 0.991651 1.021321 1.119096 1.139145 1.236943 1.272202 1.387205 1.513564 1.567486 1.609532 1.609078 1.559768 1.604095 1.51995 1.589388 1.430694 1.438483 1.307997 1.316014 1.379066 1.359022 1.335226 1.354977 1.301802 1.356982 1.26772 1.312121 1.157094 1.181556 1.076626 1.097302 1.178889 1.180916 1.160611 1.182524 1.12401 1.169299 1.087794 1.154502 1.00383 1.032653 0.925423 0.942916 1.008211 1.016964 1.020236 1.048296 1.008091 1.059152 0.981438 1.022489 0.88013 0.917824 0.811423 0.817776 0.893385 0.901335 0.898341 0.927662 0.89426 0.94762 0.866665 0.92397 0.780954 0.817766 0.713312 0.736934 0.81948 0.830698 0.826891 0.861571 0.827308 0.872388 0.786286 0.850388 0.705729 0.753301 0.678973 0.719943 0.813949 0.821496 0.827701 0.870623 0.836928 0.905375 0.817588 0.877992 0.747693 0.805677 0.720391 0.758032 0.855917 0.871511 0.872165 0.905334 0.876693 0.950293 0.865272 0.916865 0.77368 0.816331 0.713305 0.745846 0.824492 0.829948 0.838556 0.878032 0.846354 0.919615 0.82709 0.890626 0.737341 0.76716 0.66697 0.686143 0.782743 0.798591 0.821991 0.847211 0.820467 0.879216 0.795176 0.849723 0.702569 0.740639 0.639146 0.663765 0.749069 0.761004 0.763789 0.797842 0.762673 0.826754 0.744166 0.81063 0.673814 0.719499 0.622896 0.649575 0.73352 0.74174 0.744241 0.785367 0.751541 0.812459 0.73154 0.79395 0.643804 0.687521 0.587087 0.61251 0.696074 0.69993 0.706994 0.739023 0.696134 0.752624 0.670249 0.7371 0.608945 0.663868 0.58382 0.631694 0.724224 0.7389 0.758836 0.800542 0.761029 0.833595 0.747808 0.816274 0.679089 0.718736 0.6174 0.642141 0.716657 0.69886 0.701899 0.738195 0.704186 0.764559 0.674777 0.733025 0.590835 0.636089 0.546375 0.580017 0.669204 0.676762 0.697821 0.74256 0.712601 0.774119 0.69131 0.758116 0.621249 0.661717 0.557815 0.59146 0.678845 0.68723 0.689557 0.728043 0.690134 0.749408 0.661366 0.733314 0.589087 0.63236 0.534093 0.564361 0.649075 0.657759 0.66338 0.703043 0.670598 0.734545 0.645713 0.715418 0.569247 0.609988 0.507726 0.534064 0.621265 0.633817 0.642508 0.680957 0.645603 0.713837 0.622418 0.685196 0.537278 0.582467 0.482612 0.51205 0.601038 0.604918 0.617657 0.663688 0.633342 0.701836 0.617589 0.68305 0.53961 0.58084 0.478178 0.51785 0.609023 0.620781 0.63105 0.67102 0.636026 0.705372 0.616909 0.681743 0.532731 0.580913 0.483962 0.520191 0.607715 0.615682 0.624972 0.666629 0.636144 0.707355 0.61355 0.682153 0.533096 0.578852 0.475271 0.511992 0.605246 0.617886 0.626116 0.671124 0.638452 0.713069 0.62019 0.693947 0.545483 0.599715 0.495059 0.53304 0.629791 0.647378 0.66495 0.714666 0.6772 0.755306 0.658934 0.733576 0.572881 0.626378 0.514096 0.553872 0.660483 0.676005 0.689152 0.742742 0.709804 0.795989 0.701994 0.782671 0.614057 0.673848 0.559612 0.600559 0.712322 0.732203 0.746992 0.800548 0.760711 0.851103 0.744469 0.832275 0.65021 0.714737 0.593477 0.642769 0.772813 0.796795 0.819668 0.885719 0.852571 0.96042 0.847279 0.963896 0.761327 0.851628 0.714283 0.784109 0.963635 1.014527 1.064721 1.173046 1.148912 1.325949 1.194298 1.384249 1.114825 1.278967 1.094677 1.23824 1.549468 1.673634 1.811367 2.064835 2.106453 2.536825 2.405755 2.973129 2.588861 3.256925 3.072053 4.05105 5.989354 0";
			String lossCurve = "0 0 0 0 0.000004 0.000014 0.000535 0.000627 0.000714 0.000802 0.000895 0.000993 0.001102 0.00122 0.00134 0.001472 0.001711 0.001865 0.002034 0.002218 0.0024 0.002594 0.002791 0.002917 0.00305 0.003188 0.003311 0.003439 0.003571 0.003693 0.003807 0.003927 0.004058 0.004186 0.004324 0.004471 0.004633 0.004809 0.004952 0.005104 0.005263 0.005362 0.005465 0.005576 0.005695 0.005825 0.005965 0.006099 0.00625 0.006414 0.006522 0.006622 0.006725 0.00672 0.006714 0.006711 0.006724 0.006746 0.006775 0.006807 0.006847 0.006892 0.006893 0.006879 0.00687 0.006821 0.006776 0.006739 0.006702 0.00668 0.006661 0.006643 0.006638 0.006643 0.006626 0.006611 0.006602 0.00656 0.006524 0.006502 0.006508 0.006526 0.006555 0.006575 0.006602 0.006637 0.006615 0.006594 0.006574 0.006503 0.006438 0.006381 0.006321 0.006271 0.006229 0.006205 0.006193 0.006191 0.006177 0.006168 0.006167 0.006151 0.006142 0.006142 0.006136 0.006141 0.006153 0.006142 0.006143 0.006145 0.006113 0.006083 0.006058 0.006008 0.005959 0.005918 0.005872 0.005831 0.005795 0.005745 0.005698 0.00566 0.00558 0.0055 0.005426 0.005347 0.005275 0.00521 0.005165 0.005128 0.005096 0.00506 0.005027 0.004998 0.00493 0.004862 0.004799 0.004737 0.004681 0.004633 0.004613 0.004601 0.004596 0.004596 0.004602 0.004612 0.004587 0.004563 0.004542 0.004496 0.00446 0.004431 0.004406 0.004389 0.004377 0.004373 0.004374 0.00438 0.004357 0.004333 0.00431 0.004276 0.004244 0.004218 0.004198 0.004187 0.004181 0.004171 0.004166 0.004166 0.004146 0.004124 0.004104 0.00407 0.004037 0.004008 0.003969 0.003934 0.003903 0.003875 0.003852 0.003841 0.003809 0.003779 0.003749 0.003706 0.003663 0.003622 0.003576 0.003533 0.003495 0.003459 0.003431 0.003407 0.003368 0.003332 0.003297 0.003266 0.003235 0.003208 0.003187 0.003171 0.003157 0.003135 0.003115 0.003097 0.003063 0.003031 0.003 0.002971 0.002945 0.002923 0.00291 0.002901 0.002894 0.002884 0.002878 0.002874 0.002858 0.002842 0.002826 0.002808 0.002794 0.002781 0.002771 0.002762 0.002755 0.002758 0.002762 0.002769 0.002766 0.002765 0.002764 0.002752 0.002741 0.002732 0.002723 0.002718 0.002714 0.002711 0.00271 0.002711 0.002698 0.002685 0.002671 0.002655 0.00264 0.002626 0.002607 0.00259 0.002574 0.002557 0.002542 0.00253 0.002508 0.002487 0.002466 0.00244 0.002414 0.002389 0.00237 0.002353 0.002337 0.002318 0.002302 0.002287 0.00226 0.002232 0.002206 0.002173 0.002142 0.002113 0.00209 0.002068 0.002048 0.002029 0.002011 0.001994 0.001969 0.001941 0.001914 0.001887 0.001863 0.001841 0.001825 0.001811 0.001799 0.001786 0.001774 0.001762 0.001743 0.001724 0.001705 0.001683 0.001663 0.001644 0.001625 0.001609 0.001593 0.001578 0.001565 0.001551 0.001536 0.001521 0.001507 0.001497 0.001487 0.001479 0.001471 0.001464 0.001457 0.001451 0.001446 0.001442 0.001433 0.001426 0.001417 0.001407 0.001396 0.001387 0.001376 0.001367 0.001357 0.001346 0.001336 0.001326 0.001311 0.001295 0.00128 0.001263 0.001246 0.001231 0.001217 0.001203 0.00119 0.001179 0.001169 0.00116 0.001149 0.001137 0.001124 0.00111 0.001096 0.001083 0.00107 0.001058 0.001046 0.001035 0.001026 0.001016 0.001004 0.000989 0.000971 0.00095 0.000921 0.000885 0.00083 0.000745 0.000694 0.000515 0";
//			String prepayCurve = "0 4.263638 4.266951 4.09013 4.071114 3.952028 3.924206 3.712497 3.647201 3.406268 3.359983 3.170146 3.086339 3.066959 2.973789 2.83686 2.769031 2.653234 2.63206 2.442028 2.401808 2.187555 2.163621 1.989036 1.934611 1.946535 1.897282 1.863066 1.869024 1.796533 1.805783 1.699053 1.715231 1.557915 1.58197 1.472747 1.467004 1.48437 1.460508 1.408472 1.403675 1.359073 1.409029 1.312693 1.334007 1.172366 1.176423 1.065664 1.081128 1.143049 1.134718 1.122583 1.142135 1.111678 1.152781 1.069486 1.111752 0.974508 0.976349 0.889734 0.904931 0.96515 0.962242 0.963435 0.985975 0.969864 1.019776 0.946911 0.992352 0.860962 0.89285 0.801875 0.824807 0.886549 0.893385 0.889947 0.904812 0.877157 0.94108 0.861538 0.922643 0.799599 0.83896 0.761116 0.786403 0.874016 0.900138 0.920887 0.977504 0.966469 1.016542 0.956017 1.016959 0.89259 0.937862 0.852451 0.881457 0.949529 0.956861 0.969663 1.000005 0.98187 1.024989 0.944064 0.982429 0.835187 0.866144 0.762529 0.776529 0.842116 0.849886 0.857277 0.894452 0.861603 0.923906 0.830606 0.872614 0.737871 0.776685 0.689647 0.711245 0.792937 0.794283 0.7964 0.826295 0.789592 0.838583 0.762961 0.810342 0.675493 0.709243 0.615383 0.643285 0.710735 0.707276 0.715794 0.748771 0.718977 0.778204 0.7029 0.768573 0.632889 0.672157 0.5856 0.610158 0.684412 0.700053 0.704864 0.734781 0.706862 0.773071 0.68794 0.747441 0.609362 0.658596 0.561185 0.592389 0.674256 0.682103 0.682606 0.71768 0.692617 0.764527 0.688726 0.75107 0.620973 0.667715 0.579082 0.608576 0.691927 0.708015 0.706185 0.740782 0.712395 0.779231 0.700473 0.763528 0.624342 0.659744 0.562004 0.593443 0.674548 0.68888 0.699394 0.738877 0.70105 0.768249 0.686821 0.750758 0.615211 0.664094 0.568714 0.593336 0.680465 0.69444 0.70386 0.741783 0.709359 0.776898 0.686334 0.741923 0.596086 0.646073 0.547719 0.576961 0.663144 0.672794 0.673755 0.706516 0.678768 0.752712 0.662909 0.723959 0.578023 0.621121 0.518794 0.546999 0.630674 0.641401 0.650094 0.687879 0.658052 0.728975 0.637337 0.7004 0.551582 0.597031 0.493135 0.525591 0.61664 0.626502 0.635431 0.674783 0.644659 0.711192 0.622794 0.687158 0.54135 0.591788 0.492439 0.524471 0.620237 0.638613 0.651625 0.690989 0.657105 0.723615 0.631042 0.694696 0.539848 0.588321 0.486842 0.521268 0.614215 0.625071 0.634638 0.678965 0.645209 0.717472 0.621788 0.690492 0.541561 0.593797 0.489121 0.523405 0.61847 0.633229 0.643658 0.687063 0.651076 0.723877 0.630656 0.698894 0.539331 0.59148 0.489329 0.528028 0.626087 0.641581 0.656255 0.702957 0.666143 0.743064 0.649711 0.726553 0.564454 0.621107 0.510913 0.551812 0.660966 0.680622 0.693742 0.744552 0.707305 0.789143 0.689668 0.771813 0.60051 0.658541 0.544679 0.587423 0.696894 0.718704 0.737625 0.793947 0.760619 0.848911 0.742455 0.829824 0.649419 0.715804 0.593836 0.644774 0.771913 0.796128 0.816711 0.882332 0.847474 0.956853 0.843642 0.956961 0.75477 0.843816 0.708882 0.783879 0.959949 1.010587 1.064999 1.175225 1.159862 1.353068 1.23506 1.455174 1.190336 1.390668 1.224 1.423638 1.845699 2.069683 2.338982 2.81433 3.038591 3.806711 3.631539 4.415834 3.498604 0";
//			String lossCurve = "0 0 0 0.00002 0.000193 0.003618 0.010444 0.011535 0.01236 0.013068 0.013744 0.014498 0.015282 0.01607 0.016853 0.018273 0.020262 0.020927 0.021613 0.022361 0.022958 0.02361 0.024278 0.024889 0.025459 0.025984 0.026413 0.026862 0.027335 0.027731 0.028108 0.028516 0.02891 0.02933 0.029758 0.030234 0.030667 0.031077 0.031359 0.03165 0.031977 0.031928 0.031884 0.031881 0.031701 0.031529 0.031348 0.031295 0.031279 0.031324 0.031382 0.031473 0.031601 0.031425 0.031232 0.031082 0.030985 0.030951 0.030936 0.031041 0.031189 0.031362 0.031383 0.031373 0.031376 0.031175 0.03099 0.030839 0.030579 0.030365 0.030162 0.030102 0.030056 0.030054 0.030034 0.030038 0.030101 0.029979 0.029873 0.029803 0.029564 0.029367 0.029181 0.028958 0.028786 0.02868 0.028514 0.028373 0.028272 0.028 0.027732 0.027498 0.027284 0.027105 0.026934 0.026796 0.026688 0.026608 0.026421 0.026225 0.026046 0.025758 0.02549 0.025257 0.025048 0.024888 0.024729 0.024678 0.02459 0.02452 0.024431 0.024343 0.024266 0.023976 0.023705 0.023484 0.023221 0.022993 0.022777 0.022531 0.022315 0.02212 0.021873 0.021653 0.021442 0.021112 0.020791 0.020498 0.020141 0.019816 0.019505 0.019233 0.018981 0.018754 0.018488 0.018232 0.017988 0.017634 0.017279 0.016955 0.016633 0.016331 0.016031 0.015806 0.015608 0.015436 0.015285 0.015155 0.015033 0.014829 0.014641 0.014478 0.014339 0.014233 0.014141 0.014108 0.014099 0.014109 0.014101 0.014089 0.014088 0.014058 0.014033 0.014034 0.01404 0.014074 0.014112 0.01416 0.014218 0.014286 0.014295 0.014292 0.014288 0.014213 0.014138 0.014072 0.014011 0.013963 0.01391 0.013887 0.013871 0.013871 0.013796 0.013702 0.013608 0.01342 0.013231 0.013051 0.012799 0.012567 0.012348 0.012184 0.012027 0.011887 0.011767 0.011652 0.011549 0.011414 0.011276 0.011151 0.011004 0.010873 0.010741 0.010647 0.010559 0.010482 0.01044 0.010398 0.010361 0.010257 0.010152 0.010053 0.009943 0.009845 0.009748 0.009675 0.009616 0.009563 0.009497 0.009423 0.00935 0.009238 0.009125 0.009022 0.00894 0.008875 0.008808 0.008771 0.008739 0.008714 0.008705 0.008688 0.008672 0.008617 0.008565 0.008521 0.008448 0.008385 0.00832 0.008276 0.008235 0.008198 0.008183 0.008164 0.008147 0.00805 0.007947 0.007849 0.00774 0.007642 0.007546 0.007496 0.007458 0.007423 0.00739 0.007343 0.007293 0.00719 0.007084 0.006988 0.006889 0.006808 0.006731 0.006682 0.006638 0.0066 0.006565 0.006518 0.006472 0.006413 0.006351 0.006293 0.006245 0.006209 0.006174 0.006159 0.006147 0.006137 0.006129 0.006111 0.006091 0.006053 0.006012 0.005973 0.005927 0.005893 0.005856 0.005821 0.005787 0.005754 0.005723 0.005687 0.005648 0.005594 0.005538 0.005486 0.005431 0.005379 0.005324 0.005277 0.005233 0.005192 0.005159 0.005121 0.005082 0.005036 0.004989 0.004946 0.004908 0.004878 0.004848 0.004828 0.004813 0.004801 0.004795 0.004785 0.004774 0.004755 0.00474 0.004729 0.004716 0.004712 0.004709 0.004715 0.004724 0.00474 0.004764 0.004788 0.004816 0.004843 0.004876 0.004926 0.004987 0.005075 0.005177 0.005326 0.005513 0.005762 0.00612 0.006591 0.007246 0.008227 0.009717 0.011665 0.013283 0.015245 0.014377";
			
			KeyVal argOptions = new KeyVal();
			KeyVal argHandle = new KeyVal();
			KeyVal argDeal = new KeyVal();
			KeyVal argUser = new KeyVal();
			KeyVal argCF = new KeyVal();
			KeyVal argLoanscens = new KeyVal();
			KeyVal argPropscens = new KeyVal();
			KeyVal argStats = new KeyVal();
			
			argHandle.add("PERL_OUT_FILENAME","/vn_le/en2_data_d/intex/test_intex/intex_debug/output/wrapperdebug.pl");
			argHandle.add("PERL_EMBED_OUTPUT_AS_COMMENT","1");
			argHandle.add("PERL_SORT_KEYWORDS","1");
			argHandle.add("INSTANCE_HANDLE","2");
			
			//argOptions for wcmo_deal call
			argOptions.add("ACCESS_CLIENT", companyName);
			argOptions.add("ACCESS_KEYCODE", accessCode);
			argOptions.add("ADDL_MBSPOOL_FILES","GEO");
			argOptions.add("ADDL_MBSPOOL_INFO_FOR_REMICS","0");
			argOptions.add("ALLOW_REREMIC_CHILD_CF_ACCESS","REFERRED_CHILD_DEAL_ONLY");
			argOptions.add("CDI_PATH", IntexWrapTest6.CDI_PATH());
			argOptions.add("CDU_LOOKBACK_LIMIT_MODE","NONE");
			argOptions.add("CDU_PATH", IntexWrapTest6.CDU_PATH());
			argOptions.add("COLLAT_LIST_TOP_LEVEL","1");
			argOptions.add("CUSIP_TABLES","CMO|ISIN|MBS|BBGTK|BBGDEAL|BBGID|BDC");
			argOptions.add("DECIMAL_DIGITS_CF_GAP","2");
			argOptions.add("DECIMAL_DIGITS_CF_TABLE","9");
			argOptions.add("DECIMAL_DIGITS_CONVEX","9");
			argOptions.add("DECIMAL_DIGITS_COUP_FAC","9");
			argOptions.add("DECIMAL_DIGITS_CP","9");
			argOptions.add("DECIMAL_DIGITS_DEC_TABLE","0");
			argOptions.add("DECIMAL_DIGITS_DISCOUNTMARGIN","9");
			argOptions.add("DECIMAL_DIGITS_DURN","9");
			argOptions.add("DECIMAL_DIGITS_FACTOR","9");
			argOptions.add("DECIMAL_DIGITS_PERCENT","9");
			argOptions.add("DECIMAL_DIGITS_PRICE","9");
			argOptions.add("DECIMAL_DIGITS_SPREAD","9");
			argOptions.add("DECIMAL_DIGITS_SYMVAR_TABLE","9");
			argOptions.add("DECIMAL_DIGITS_TICS","0");
			argOptions.add("DECIMAL_DIGITS_TRIGGER_VAL","9");
			argOptions.add("DECIMAL_DIGITS_WAL","9");
			argOptions.add("DECIMAL_DIGITS_WAVG_INTEGER","9");
			argOptions.add("DECIMAL_DIGITS_YIELD","9");
			argOptions.add("DO_EXPLODE_MEGAS","0");
			argOptions.add("DO_FORMAT_TRIGVALS","1");
			argOptions.add("EXCLUDE_PREFUND_FROM_TERMS","1");
			argOptions.add("EXTENSIVE_ERROR_CHECKING","FATAL");
			argOptions.add("FORMAT_DURATION_AS_INTEGER","1");
			argOptions.add("GET_ABS_SUMMARY_FROM_LATEST_CDU","1");
			argOptions.add("GET_CHILD_TRIGGERS","1");
			argOptions.add("HIDE_MODELING_TRANCHES","0");
			argOptions.add("HIDE_RESTRICTED_TRANCHES","1");
			argOptions.add("IGNORE_DESCRIPTIVE_INFO","NONE");
			argOptions.add("IGNORE_PAIDDOWN_COLLAT","1");
			argOptions.add("INCLUDE_PNOTES","1");
			argOptions.add("INCLUDE_UNDEFINED_ASSET_INFOS","1");
			argOptions.add("LOANS_CONTROLS_LIMIT", "0");
			argOptions.add("ISR_FILENAME","/vn_le/en2_data_d/intex/test_intex/intex_debug/output/vcmowrap.isr");
			argOptions.add("MAKE_XRS_TRANCHE","0");
			argOptions.add("MAX_SCHED_ELEMENTS","ALL");
			argOptions.add("MAX_THREADS","2");
			argOptions.add("N_PREDEFINED_VARS","1");
			argOptions.add("PNOTE_MAIN_AS_COLLAT","0");
			argOptions.add("PREDEFINED_VAR[1]","#_IGNORE_INFO_ONLY_CDU_AS_LATEST_CDU");
			argOptions.add("PRICE_TICS_DECIMAL","DECIMAL");
			argOptions.add("REQUIRE_CLEANUP_PRECISION","0");
			argOptions.add("SHOW_GROUP_NAMES","1");
			argOptions.add("SHOW_HEDGE_TRANCHES","HEDGENET");
			argOptions.add("SHOW_INTERNAL_DATA_ITEMS","1");
			argOptions.add("SHOW_PSEUDO_TRANCHES","1");
			argOptions.add("SINGLE_TRANCHE_MODE","1");
			argOptions.add("STRUCTURED_ASSET_DATA_PREFERRED_SOURCE","INTEX_DETERMINED");
			argOptions.add("TAG_TRANCHE_WITH_PROVIDED_IDENTIFIER","1");
			argOptions.add("TRADING_ACCURACY_NOT_REQUIRED","1");
			argOptions.add("USE_DUEBILL","ZERO_DELAY_BONDS");
			argOptions.add("USE_HIST_ALL", "BASE_ONLY");
			argOptions.add("USE_VINDEX0", "0");
			argOptions.add("VALID_DATES_ONLY","1");
			argOptions.add("YLDCRV_NODES","COMMON|1YR|3YR|7YR");
			argOptions.add("SETTLE_WITH_CDU_DATE", "CDU_DATE");
			
//			argDeal.add("DEAL_MODE", "SEASONED_EXPLODE");
			argDeal.add("DEAL_MODE", "NEW");
			argDeal.add("DEAL_NAME", dealName);
			argDeal.add("DO_OPTIMIZE_CLUSTERING", "0");
			argDeal.add("DO_STRAT_COLLAT", "0");
			argDeal.add("FACE_AMOUNT_SCALE_BASIS", "SUGGESTED_BAL");
//			argDeal.add("SETTLE_YYYYMMDD", "20150201");
			
			//argOptions added for wcmo_deal_info call
			argOptions.add("DEAL_INFO_DEALNAME", dealName);
			argOptions.add("DEAL_INFO_WANTED", "TRANCHE_NAMES|DEAL_ISSUE_DATE");
			
			//argOptions added for wcmo_collat call
			argOptions.add("COLLAPSE_SINGLE_ELEMENT_HISTOGRAM","1");
			argOptions.add("COLLAT_LIST_EXPLODE","NO_SUMMARY");
			argOptions.add("EXCLUDE_NONCONTRIBUTING_GROUPS","1");
			argOptions.add("EXCLUDE_PREFUND_FROM_TERMS","1");
			argOptions.add("FORMAT_DURATION_AS_INTEGER","1");
			argOptions.add("MODHIST_ITEM_LIST","STATUS(24)|STATUS(COUNT,24)|DETAIL(24)|STATUS(60)|STATUS(COUNT,60)|DETAIL(60)");
			argOptions.add("PAYSTATUS_ITEM_LIST","HIST(DELINQ,24)|WORST(24)|CURRENT(STATUS_60,24)|HIST(DELINQ_WITH_MOD,24)|WORST_SINCE_MOD(24)|HIST(DELINQ,60)|WORST(60)|CURRENT(STATUS_60,60)|HIST(DELINQ_WITH_MOD,60)|WORST_SINCE_MOD(60)|PREVBAL()|MOS_TO_LIQ()");
			argOptions.add("REMAP_COLLAT_ONLY","1");
			argOptions.add("SHOW_COLLAT_FOR_STRATS_DATA","1");
			argOptions.add("SHOW_FMT_DATA_ITEMS","1");
			argOptions.add("SHOW_REINVEST_COLLAT","COLLAT_LEVEL");
			
			//argOptions added for wcmo_uncollat call
			argOptions.add("SHOW_NUMBERS_NO_COMMAS","ALWAYS");
			argOptions.add("UCOLLAT_SUBSET_ACTION","DELETE");

			//argOptions added for wcmo_cashflow call
			argOptions.add("DEFAULT_LOSS_AT_BALLOON","ALLOW_LOSS_NEAR_BALLOON");
			argOptions.add("DEFAULT_LOSS_AT_MATURITY","0_AT_LAG");
			argOptions.add("FULL_CASHFLOW_DETAIL","FULL");
			argOptions.add("INCLUDE_ASSET_REINV_IN_CF_PRINCIPAL","0");
			argOptions.add("MOS_BETWEEN_CALLPRO_ROWS","1");
			argOptions.add("MOS_BETWEEN_CASHFLOW_ROWS","1");
			argOptions.add("MOS_BETWEEN_DECTABLE_ROWS","1");
			argOptions.add("OMIT_PERIOD_ZERO_ROW","0");
			argOptions.add("SHOW_ACCRUED_PRINC_AS_POSITIVE","1");
			argOptions.add("SHOW_CASHFLOWS_MODE","ENTITLED");
			argOptions.add("SHOW_CF_TOTALS_TOP","0");
			argOptions.add("SHOW_NUMBERS_NO_COMMAS","ALWAYS");
			argOptions.add("SINGLE_TRANCHE_MODE","1");
			argOptions.add("STRUCTURED_ASSET_DATA_PREFERRED_SOURCE","INTEX_DETERMINED");
			argOptions.add("TREAT_SEVERITY_AS_RECOVERY","0");
			
			argCF.add("BUSINESSDAY_METHOD","DEFAULT");
			argCF.add("DEAL_LEVEL_IS_BASE_CASE","1");
			argCF.add("DERIVE_SPOT_RATES_FROM_YIELD_CURVE","1");
			argCF.add("FULL_CASHFLOW_DETAIL","FULL");
			argCF.add("INDEX_OFFSET_ELEMENTS","0");
			argCF.add("INDEX_PROXY_APPLY","ALWAYS");
			argCF.add("LIBOR_1MO", intRate);
			argCF.add("LIBOR_1MO_UNITS","PERCENT");
			argCF.add("LIBOR_1MO_USERCURVE_TYPE","NONE");
			argCF.add("LOSS_ALLOW_EXCESS_SEVERITY","0");
			argCF.add("LOSS_RATE",lossCurve);
			argCF.add("LOSS_SEVERITY","0");
			argCF.add("LOSS_SEVERITY_IS_GROSS","0");
			argCF.add("LOSS_UNITS","MDR");
			argCF.add("LOSS_USERCURVE_TYPE","NONE");
			argCF.add("N_SCENARIOS","100");
			argCF.add("OMIT_PERIOD_ZERO_ROW","0");
			argCF.add("PREFUND_DEFAULT","LOCKOUT");
			argCF.add("PREFUND_PREPAY","LOCKOUT");
			argCF.add("PREPAY_RATE", prepayCurve);
			argCF.add("PREPAY_UNITS","SMM");
			argCF.add("PREPAY_USERCURVE_TYPE","NONE");
			argCF.add("RECOVER_LAG","0");
			argCF.add("RECOVER_LAG_USERCURVE_TYPE","NONE");
			argCF.add("RESOLVE_CONFLICTS","BY_ANY");
			argCF.add("RETAIN_SCENARIOS","1");
			argCF.add("RUN_SCENARIO","1");
			argCF.add("SCENARIO#","0");
			argCF.add("SCENARIO_TYPE","LOAN");
			argCF.add("SEGREGATE_QUERY_FORECASTS","1");
			argCF.add("SERV_ADV","ADVANCES_ALL_BUT_NEWLY_LIQDTD");
			argCF.add("SERVICER_ADVANCE_DETERMINE_BY_MODEL","1");
			argCF.add("SEVERITY_USERCURVE_TYPE","NONE");
			argCF.add("SINGLE_TRANCHE_MODE","1");
			argCF.add("STORE_CHILD_TRIGSERIES","1");
			argCF.add("SUPPORT_PCT_FORCE_GROUP_DIRECTED","0");
			argCF.add("SUPPORT_PCT_IGNORE_INSURANCE","0");
			argCF.add("USE_QUERY_SCRIPT","BOTTOM_ASSETS");
			argCF.add("YIELD_CURVE_DAYCOUNT_METHOD_NORMALIZED","30360");
			argCF.add("YIELD_CURVE_MATURITIES","1MO|3MO|6MO|1YR|2YR|3YR|5YR|7YR|10YR|30YR|");
			argCF.add("YIELD_CURVE_N_NODES","10");
			argCF.add("YIELD_CURVE_SPREAD_OFF","WAL_INTERPOLATED");
			
			//argOptions added for wcmo_ucollat_subset_catalog call
			argCF.add("UCOLLAT_SUBSET_ACTION","NAMELIST");
			argCF.add("UCOLLAT_SUBSET_DEALNAME",dealName);
			
			argStats.add("DAYCOUNT_METHOD","DEFAULT");
			argStats.add("FACE_AMOUNT","FULL FACE");
			argStats.add("FACE_AMOUNT_SCALE_BASIS","SUGGESTED_BAL");
			argStats.add("IGNORE_CF_AFTER_BOND_PAYDOWN","0");
			argStats.add("REPORT_COLLAT_LOSS_LIQ_MODE","AMOUNT");
			argStats.add("RUN_TYPE","CASHFLOWS");
			argStats.add("SCENARIO#","0");
			argStats.add("TRANCHE_ROW","-1");
			
			IntexWrap instance = new IntexWrap(argHandle.toString(),argUser.toString(),DataOut);
			System.out.print(DataOut.toString());

			String retDealString = instance.deal(argOptions.toString(),
					argDeal.toString());
			
			String retDealInfoString = instance.deal_info(argOptions.toString(), null);
			
			String retCollatString = instance.collat(argOptions.toString(), argDeal.toString());
			
			String retCollatSubsetString = instance.ucollat_subset_catalog(	argOptions.toString(),"" );

			String retCFString = instance.cashflow(argOptions.toString(), null,
					argCF.toString(), argLoanscens.toString(), argPropscens.toString());
			System.out
			.println("***********************Deal Output Below***************************************");
			System.out.println(retDealString);
			
			System.out
			.println("***********************Deal Info Below***************************************");
			System.out.println(retDealInfoString);
			
			System.out
			.println("***********************Collat Output Below***************************************");
			System.out.println(retCollatString);
			
			System.out
			.println("***********************Ucollat Subset Catalog Output Below***************************************");
			System.out.println(retCollatSubsetString);

			System.out
					.println("***********************Cashflow Output Below***************************************");
			System.out.println(retCFString);

			for (String trancheName : trancheNames) {
				argStats.add("TRANCHE_ROW", trancheName);
				String ret3String = instance.stats(argOptions.toString(), null,
						argCF.toString(), argStats.toString());
				System.out
						.println("***********************" + trancheName + " Stats Output Below***************************************");
				System.out.println(ret3String);
			}

			instance.exit();
		} catch (IntexWrapParseException e1) {
			System.out.println("Error!:" + e1.toString());
			System.out.println("\n\nDataOut:\n" + e1.getDataOut());
		} catch (IntexWrapException e1) {
			System.out.println("Error!:" + e1.toString());
		}
	}
}